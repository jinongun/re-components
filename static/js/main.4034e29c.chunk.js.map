{"version":3,"sources":["components/Countdown/Countdown.tsx","components/Button/Button.tsx","components/Input/Input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","forwardRef","ref","interval","value","autoStart","render","onStart","onPause","onTick","onComplete","onMount","onUnmount","useState","count","setCount","isRunnning","setIsRunning","completed","setCompleted","useImperativeHandle","start","pause","secondsToDay","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","prev","seconds","d","toString","padStart","h","m","s","disabled","onClick","className","style","block","children","styles","type","inputMode","defaultValue","addonBefore","addonAfter","prefix","suffix","onChange","formatter","border","e","console","log","target","newValue","App","v1","setV1","btn","focus","x","parts","split","replace","join","background","padding","color","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4034e29c.chunk.js","sourcesContent":["import React from 'react';\n\n\ninterface CountdownProps{\n\n  interval?: 1000 // 10 | 100 | 1000 // milliseconds\n  value?: number\n  autoStart?: boolean\n  render?: ({d,h,m,s}:{[key:string]:any}) => React.ReactNode;\n\n  onMount?: ()=>void;\n  onUnmount?: ()=>void;\n\n  onStart?: ()=>void;\n  onPause?: ({d,h,m,s}:{[key:string]:string})=>void;\n  onComplete?: ()=>void;\n  onTick?: ({d,h,m,s}:{[key:string]:string}) => void;\n\n  style?: React.CSSProperties;\n  className?: string;\n\n}\n\nfunction Countdown({interval=1000, value=0, autoStart = true, render, onStart, onPause, onTick, onComplete, onMount, onUnmount }:CountdownProps, ref:any ){\n  const [count, setCount] = React.useState(0);\n  const [isRunnning, setIsRunning] = React.useState(autoStart);\n  const [completed, setCompleted] = React.useState(false);\n  React.useImperativeHandle(ref, () => ({\n    start() {\n      setIsRunning(true);\n      onStart?.();\n    },\n    pause(){\n      setIsRunning(false);\n      onPause?.(secondsToDay(count-1));\n    },\n  }));\n  useInterval(() => {\n    if(isRunnning){\n      setCount( (prev) => prev-1 );\n      onTick?.(secondsToDay(count-1));\n    }\n    if( (count-1) === 0){\n      setCompleted(true);\n      onComplete?.();\n    }\n  }, count > 0 ? interval : null , isRunnning);\n\n  \n  React.useEffect(()=>{\n    //ComponentDidMount\n    onMount?.();\n    const ms = 1000 / interval;\n    setCount(value * ms);\n    return () => {\n      //ComponentWillUnmount\n      onUnmount?.();\n    }\n  }, [onMount, setCount, onUnmount, interval, value]);\n  return (\n  <>\n    {\n    render?.({...secondsToDay(count), completed}) || <div>{count}</div>\n  }\n  </>\n  )\n}\nexport default React.forwardRef(Countdown);\n\n\nfunction secondsToDay(seconds:number){\n  let d = (~~(seconds / (60 * 60 * 24))).toString().padStart(2, '0');\n  let h = (~~(seconds % (60 * 60 *24) /(60 * 60))).toString().padStart(2, '0');\n  let m = (~~((seconds % (60 * 60 *24) % (60 * 60)) / 60)).toString().padStart(2, '0');\n  let s = (~~(seconds % 60)).toString().padStart(2, '0');\n  return { d, h, m, s };\n}\nfunction useInterval(callback: any, delay: any, isRunnning: boolean) {\n  const savedCallback: any = React.useRef();\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (isRunnning && delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay, isRunnning]);\n};","import React from 'react';\n\ninterface ButtonProps{\n  children?:React.ReactNode;\n  style?: React.CSSProperties;\n  className?: string;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  disabled?: boolean;\n  block?: boolean;\n}\n\nfunction Button({disabled, onClick, className, block, style, children}:ButtonProps, ref:any){\n  const styles={\n    ...style,\n  }\n  return (\n    <button ref={ref} disabled={disabled} onClick={onClick} className={className} style={styles}>\n      {children}\n    </button>\n\n  )\n}\n\nexport default React.forwardRef(Button);","import React, { EventHandler } from 'react';\nimport './Input.css';\ninterface InputProps{\n  id?: string;\n  placeholder?: string;\n  style?: React.CSSProperties;\n  className?: string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  addonBefore?: React.ReactNode;\n  addonAfter?: React.ReactNode;\n  disabled?: boolean;\n  block?: boolean;\n  formatter?: any;\n  type?: \"text\" | \"number\" | \"email\" | \"password\" | \"tel\";\n  inputMode?: \"text\" | \"numeric\";\n  value?: number|string|any;\n  defaultValue?: number | string;\n  onChange?: (e:any) => void;\n  onPressEnter?: () => void;\n  [key: string]: any;\n}\n\n\nfunction Input({type=\"text\",inputMode=\"text\",value,defaultValue,addonBefore,addonAfter,prefix,suffix,disabled,onChange,formatter,...props}:InputProps, ref:any){\n  function handleChange(e:React.ChangeEvent<any>){\n    console.log(e.target.value);\n    let newValue:any = '';\n    if(formatter){\n      newValue = formatter(e.target.value);\n    }\n    onChange?.(newValue);\n  }\n  return(\n    <>\n    {addonBefore}\n    <label style={{border: '1px solid gray'}}>\n      {prefix}\n      <input inputMode={inputMode} ref={ref} defaultValue={defaultValue} value={value} type={type} style={{border: '0'}} onChange={handleChange} disabled={disabled}/>\n      {suffix}\n    </label>\n    {addonAfter}\n    </>\n  )\n}\n\nexport default React.forwardRef(Input);","import React from 'react';\nimport './App.css';\nimport Countdown from './components/Countdown';\nimport Button from './components/Button';\nimport Input from './components/Input';\n\nfunction App() {\n  const [v1, setV1] = React.useState<any>(\"1,23465\");\n  const btn = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(()=>{\n    if(btn.current){\n      btn.current.focus();\n    }\n  },[]);\n  function CustomRender({d,h,m,s, completed}:any){\n    if(completed){\n     return <div style={{background: 'gray', padding: '8px'}}>\n        <p>Completed!</p>\n      </div>\n    }\n    return(\n      <div style={{background: 'gray', padding: '8px'}}>\n        <span>{d}</span>\n        <span>{h}</span>\n        <span>{m}</span>\n        <span style={{color: 'red'}}>{s}</span>\n      </div>\n    )\n  }\n  function numberWithCommas(x:any) {\n    //return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    var parts = x.toString().split(\".\");\n      parts[0] = parts[0].replace(/\\,/g,''); \n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return parts.join(\".\");\n    //return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n  \n  }\n  \n  return (\n    <div className=\"App\">\n      <Button ref={btn}>Children</Button>\n      <Button block>Block Button</Button>\n      <br/>\n      <Input prefix=\"pref\" suffix=\"suff\"\n        addonBefore={<Button>Addon</Button>}\n        addonAfter={<Button>Addon</Button>}\n      />\n      <br/>\n      <Input prefix=\"pref\" suffix=\"suff\" disabled />\n      <br/>\n      <Input type=\"tel\" formatter={numberWithCommas} defaultValue={\"1,234\"} value={v1} onChange={setV1} prefix=\"pref\" suffix=\"suff\" />\n\n      <Countdown value={300} />\n      <Countdown value={15} onComplete={()=>{}} render={CustomRender} />\n\n      {/* <Countdown interval={100}  value={300} autoStart={true}/>\n      <Countdown interval={10} value={300} /> */}\n\n      {/* <Countdown interval={1000} value={300} render={ ({d,h,m,s, setPaused}) =>\n        (<> \n          <span>{d}</span>:\n          <span>{h}</span>:\n          <span>{m}</span>:\n          <span>{s}</span>\n          <br/>\n          <button onClick={()=>setPaused(true)}>Pasue!</button>\n        </>)\n      }/>\n      <br/>\n      <Countdown interval={1000} value={300} render={({d,h,m,s})=>(\n        <> \n          <span>{h}</span>:\n          <span>{m}</span>:\n          <span>{s}</span>\n        </>\n      )} />\n      <br/>\n      <Countdown interval={1000} value={300} render={({d,h,m,s})=>(\n        <> \n          <span>{m}</span>:\n          <span>{s}</span>\n        </>\n      )} /> */}\n\n\n      {/* <Countdown interval={10} value={300} />\n      <Countdown value={300} />\n      <Countdown value={300} /> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}